name: Django Financial App CI/CD

on:
  push:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code from GitHub repository
      - name: Checkout code from repository
        uses: actions/checkout@v2

      # Step 2: Set up Python environment
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Step 3: Install Dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-django pytest-xdist

      # Step 4: Create .env file with TESTING=True for Tests
      - name: Create .env file for Tests
        run: |
          cat <<EOF > .env
          DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
          DATABASE_ENGINE=django.db.backends.sqlite3
          DATABASE_NAME=':memory:'
          CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL }}
          CELERY_RESULT_BACKEND=${{ secrets.CELERY_RESULT_BACKEND }}
          ALPHAVANTAGE_API_KEYS=${{ secrets.ALPHAVANTAGE_API_KEYS }}
          DEBUG=True
          TESTING=True
          EOF

      # Step 5: Run Tests Using pytest
      - name: Run Tests with pytest in Parallel
        run: pytest -n auto --ds=financial_project.settings --maxfail=5 --disable-warnings
        env:
          DJANGO_SETTINGS_MODULE: financial_project.settings
      # Using `-n auto` to run tests in parallel across available CPU cores

  deploy:
  runs-on: ubuntu-latest
  needs: test
  steps:
    # Step 1: Checkout code from repository
    - name: Checkout Repository
      uses: actions/checkout@v2

    # Step 2: Set Up SSH
    - name: Set Up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    # Step 3: Verify .env on EC2 and Deploy
    - name: Deploy to EC2 via SSH
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          cd ${{ secrets.EC2_PATH }}
          # Verify that the correct .env file is in place
          if [ ! -f .env ]; then
            echo ".env file not found. Deployment aborted."
            exit 1
          fi
          # Log the .env contents without exposing sensitive data for verification
          grep "DATABASE_ENGINE" .env
          # Proceed with deployment if everything is correct
          sudo docker-compose down
          sudo docker-compose up -d --build
        EOF

